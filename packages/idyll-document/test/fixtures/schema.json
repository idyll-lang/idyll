[
  {
    "component": "h1",
    "children": [
      "Welcome to Idyll"
    ]
  },
  {
    "component": "h3",
    "children": [
      "Idyll is a language for creating interactive documents on the web."
    ]
  },
  {
    "component": "p",
    "children": [
      "This document is being rendered from ",
      {
        "component": "strong",
        "children": [
          "Idyll markup"
        ]
      },
      ". If you’ve used ",
      {
        "component": "a",
        "href": "https://daringfireball.net/projects/markdown/",
        "children": [
          "markdown"
        ]
      },
      ", Idyll should look pretty familiar, but it has some additional features. Write text in the box on the left and the output on the right will automatically update."
    ]
  },
  {
    "component": "p",
    "children": [
      "To make things a little more interesting you can add JavaScript components to your text.\nFor example, a ",
      {
        "component": "code",
        "children": [
          "[Chart /]"
        ]
      },
      " component can be used to render a simple visualization:"
    ]
  },
  {
    "component": "Chart",
    "type": "scatter",
    "children": []
  },
  {
    "component": "p",
    "children": [
      "Try changing the chart’s type from ",
      {
        "component": "code",
        "children": [
          "scatter"
        ]
      },
      " to ",
      {
        "component": "code",
        "children": [
          "line"
        ]
      },
      ", ",
      {
        "component": "code",
        "children": [
          "area"
        ]
      },
      ", or ",
      {
        "component": "code",
        "children": [
          "pie"
        ]
      },
      "."
    ]
  },
  {
    "component": "p",
    "children": [
      "A component’s properties can be strings (“I’m a string!”), numbers (1.569), or evaluated JavaScript expressions (",
      {
        "component": "code",
        "children": [
          "`2 * Math.PI`"
        ]
      },
      ")."
    ]
  },
  {
    "component": "p",
    "children": [
      "There are a number of components available — see ",
      {
        "component": "a",
        "href": "https://idyll-lang.github.io/components-built-in",
        "children": [
          "Idyll’s documentation"
        ]
      },
      " for a full list — Additional components can be installed via ",
      {
        "component": "code",
        "children": [
          "npm"
        ]
      },
      " (any React component should work), and if you are comfortable with JavaScript you can write ",
      {
        "component": "a",
        "href": "https://idyll-lang.github.io/components-custom",
        "children": [
          "custom components"
        ]
      },
      " as well."
    ]
  },
  {
    "component": "p",
    "children": [
      "Idyll also provides a reactive variable system that can be used to dynamically update the text based on input from a reader."
    ]
  },
  {
    "component": "p",
    "children": [
      "Instantiating a variable is similar to instantiating a component:"
    ]
  },
  {
    "component": "code",
    "children": [
      "[var name:\"x\" value:1 /]"
    ]
  },
  {
    "component": "p",
    "children": [
      "Once you’ve created a variable, it can be displayed inline with text\n(x = ",
      {
        "component": "Display",
        "__vars__": {
          "var": "x"
        },
        "var": "x",
        "children": []
      },
      "),\nor be used to parameterize components. Derived variables can be used to create values that depend on other variables, similar to a formula in Excel:"
    ]
  },
  {
    "component": "code",
    "children": [
      "[derived name:\"xSquared\" value:`x * x` /]"
    ]
  },
  {
    "component": "p",
    "children": [
      "Here I bind the value of ",
      {
        "component": "code",
        "children": [
          "x"
        ]
      },
      " to a range slider. Move the slider and watch the variables update."
    ]
  },
  {
    "component": "Range",
    "__vars__": {
      "value": "x"
    },
    "value": "x",
    "min": 0,
    "max": 100,
    "children": []
  },
  {
    "component": "p",
    "children": [
      {
        "component": "equation",
        "children": [
          "x"
        ]
      },
      ":\n ",
      {
        "component": "Display",
        "__expr__": {
          "var": "x"
        },
        "var": "x",
        "children": []
      }
    ]
  },
  {
    "component": "p",
    "children": [
      {
        "component": "equation",
        "children": [
          "x^2"
        ]
      },
      ":\n ",
      {
        "component": "Display",
        "__expr__": {
          "var": "xSquared"
        },
        "var": "xSquared",
        "children": []
      }
    ]
  },
  {
    "component": "p",
    "children": [
      "Test expression, displays:"
    ]
  },
  {
    "component": "Display",
    "id": "varDisplay",
    "__expr__": {
      "value": "x"
    },
    "value": "x",
    "children": []
  },
  {
    "component": "Display",
    "id": "derivedVarDisplay",
    "__expr__": {
      "value": "xSquared"
    },
    "value": "xSquared",
    "children": []
  },
  {
    "component": "Display",
    "id": "strDisplay",
    "__expr__": {
      "value": "\"string\""
    },
    "value": "\"string\"",
    "children": []
  },
  {
    "component": "Display",
    "id": "staticObjectDisplay",
    "__expr__": {
      "value": "{ static: \"object\" }"
    },
    "value": "{ static: \"object\" }",
    "children": []
  },
  {
    "component": "Display",
    "id": "dynamicObjectDisplay",
    "__expr__": {
      "value": "{ dynamic: x }"
    },
    "value": "{ dynamic: x }",
    "children": []
  },
  {
    "component": "Display",
    "id": "dataDisplay",
    "__expr__": {
      "value": "myData"
    },
    "value": "myData",
    "children": []
  },
  {
    "component": "p",
    "children": [
      "Here is an example of how you could use a variable to control the frequency of a sine wave:"
    ]
  },
  {
    "component": "Chart",
    "__expr__": {
      "equation": "(t) => Math.sin(t * frequency)",
      "domain": "[0, 2 * Math.PI]"
    },
    "equation": "(t) => Math.sin(t * frequency)",
    "domain": "[0, 2 * Math.PI]",
    "samplePoints": 1000,
    "children": []
  },
  {
    "component": "Range",
    "__vars__": {
      "value": "frequency"
    },
    "value": "frequency",
    "min": 0.5,
    "__expr__": {
      "max": "2 * Math.PI"
    },
    "max": "2 * Math.PI",
    "step": 0.0001,
    "children": []
  },
  {
    "component": "p",
    "children": [
      "Read more about Idyll at ",
      {
        "component": "a",
        "href": "https://idyll-lang.github.io/",
        "children": [
          "https://idyll-lang.github.io/"
        ]
      },
      ", and come say “Hi!” in our ",
      {
        "component": "a",
        "href": "https://gitter.im/idyll-lang/Lobby",
        "children": [
          "chatroom on gitter"
        ]
      },
      "."
    ]
  }
]