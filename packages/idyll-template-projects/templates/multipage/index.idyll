[meta title:"{{title}}" description:"Short description of your project" /]

[Header
  fullWidth:true
  title:"{{title}}"
  subtitle:"Welcome to Idyll. Open index.idyll to start writing"
  author:"Your Name Here"
  authorLink:"https://idyll-lang.org"
  date:"{{date}}"
  background:"#222222"
  color:"#ffffff"
   /]

## Quick Start
* The multipage template uses an index, or main, page (in this directory) alongside multiple sub-pages (in the `posts` directory).
* To create a new page, `cd posts` to navigate to the `posts` directory, then use `idyll create --template ../template --no-install` to create a new post.
* To run a sub-page, `cd posts/name-of-page` to navigate to that page's directory, then use `idyll`.
* Any pages that have been built will go to the `docs` directory (found within the top level of the multipage post).

## Project overview

- `posts` - all of the available posts, each directory within contains a full idyll post
- `components` - shared components, can be used by any post. Each post also has its own components folder where you can put components that don't need to be shared.
- `template` - the post template to use when you run `idyll create`. Update this template with site specific styles, configuration, etc.
- `index.idyll` - the root/index page for the blog. Note this is not autogenerated.
- `docs` - the folder where the output is built. Deploy to any static hosting service (we name it `docs` so its easy to host on github pages).

## Installation

- Make sure you have `idyll` installed (`npm i -g idyll`).
- Clone this repo and run `npm install`.

## Creating a post

Navigate to the posts directory and run `idyll create --template ../template/ --no-install`.
Alternatively, use `idyll create`, select `Custom` for the template when prompted, and provide the path `../template/`.

Using the `idyll create` command without one of the other templates will work, but the above will automatically follow the default structure of the multipage post, while the other preset templates will not.
If you do choose to use another template, your build files will go to `posts/name-of-post/build/` instead of `docs/name-of-post/`.

To change the output location, change the `output` option in `package.json` in the template directory (if using the provided template) and at the root of this project (and any existing posts!).

## Developing a post locally

Navigate to the post's directory and run `idyll`.

## Developing the index page

Navigate to the root of this project and run `idyll`.

## Building a post for production

Navigate to the post's directory and run `idyll build`. The output will appear in the top-level `docs` folder. To change the output location, change the `output` option in `package.json` in the template directory and at the root of this project (and any existing posts!).

To change the output location, change the \`output\` option in \`package.json\` in the template directory and at the root of this project (and any existing posts!).
(This assumes that you are using the template provided for multipage blogs.)

## Deploying

Make sure all of your posts have been built, then deploy the docs folder via any static hosting service.

## Dependencies

You can install custom dependencies on a per-post basis by running `npm install <package-name> --save` in the post directory. Note that any collaborators will also need download the package locally by running `npm install` after pulling the changes.

## Known limitations

- Note that idyll.pub (used by the `idyll publish` command) does not yet support multi-page projects such as this one, so it is up to you host the output online.
- The index page needs to be updated manually, it is not yet autogenerated based on the `posts` directory.

[hr /]

# Posts

* [Post 1](./post-1/) - note, you'll need to compile the post before this link will work.
